---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Inicio",
    href: "#inicio",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "ExperiÃªncia",
    href: "#experiencia",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M7 5V2C7 1.44772 7.44772 1 8 1H16C16.5523 1 17 1.44772 17 2V5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V6C2 5.44772 2.44772 5 3 5H7ZM9 3V5H15V3H9ZM4 7V19H20V7H4Z"></path></svg>`,
  },
  {
    label: "Projetos",
    href: "#projetos",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  }
];
---

<div class="flex justify-center w-full">
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-1 border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%]"
  >
    <div class="container mx-auto flex justify-center items-center p-3">
      <ul
        class="flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
              >
                <div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#A9FF5B] nav-indicator hidden md:block" />
                <span class="md:hidden flex items-center justify-center w-6 h-6">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>
<style>
  nav {
    transform: translateX(-50%);
    background-color: var(--background);
    transition:
      background-color 0.3s ease,
      border-radius 0.3s ease,
      border-color 0.3s ease;
  }

  nav.scrolling {
    background-color: var(--component-bg);
    border-color: #ffffff10;
    border-radius: 9999px;
  }

  nav a.active .nav-indicator {
    transform: translateY(-50%) scale(1);
    opacity: 1;
  }

  nav a.active {
    color: white !important;
  }

  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      transform: translateX(-50%);
      bottom: 0;
      left: 50%;
      position: fixed;
      border-radius: 1rem 1rem 0 0;
      border-color: #ffffff10;
    }

    nav.scrolling {
      border-radius: 1rem 1rem 0 0;
      background-color: var(--component-bg);
    }

    body {
      padding-bottom: 70px;
    }
  }
</style>

<script>
  const nav = document.getElementById("main-nav");
  const maxScroll = 1000;
  let rafId = null;

  function updateNav() {
    if (window.scrollY > 0) {
      nav?.classList.add("scrolling");
      const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
      const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);
      const minWidth = 528;
      const maxWidth = window.innerWidth * 0.8;
      const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;
      if (window.innerWidth >= 768) nav?.style.setProperty("width", `${currentWidth}px`);
    } else {
      nav?.classList.remove("scrolling");
      nav?.style.setProperty("width", "80%");
    }
    rafId = null;
  }

  const sectionEls = Array.from(document.querySelectorAll("section[id]")) as HTMLElement[];
  const navLinks = Array.from(document.querySelectorAll("nav a[href^='#']"));
  const byHref = Object.fromEntries(navLinks.map(a => [a.getAttribute("href") || "", a]));

  let suppressSpyUntil = 0;

  function suppressSpy(ms = 900) { suppressSpyUntil = performance.now() + ms; }
  function spyIsSuppressed() { return performance.now() < suppressSpyUntil; }

  function setActiveById(id: string) {
    const href = `#${id}`;
    navLinks.forEach(a => a.classList.toggle("active", a.getAttribute("href") === href));
  }

  function updateActiveOnScroll() {
    const anchorY = window.scrollY + window.innerHeight * 0.28 + (nav?.offsetHeight || 0);

    let inside: string | null = null;
    let nearest: { id: string; dist: number } | null = null;

    for (const sec of sectionEls) {
      const top = sec.offsetTop;
      const bottom = top + sec.offsetHeight;

      if (anchorY >= top && anchorY < bottom) {
        inside = sec.id;
        break;
      }
      const dist = Math.min(Math.abs(anchorY - top), Math.abs(anchorY - bottom));
      if (!nearest || dist < nearest.dist) nearest = { id: sec.id, dist };
    }

    const id = inside ?? nearest?.id;
    if (id) setActiveById(id);
  }

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      const target = e.currentTarget;
      if (!(target instanceof HTMLAnchorElement)) return;

      const targetId = (target.getAttribute("href") || "").slice(1);
      const el = document.getElementById(targetId);
      if (el) {
        setActiveById(targetId);
        suppressSpy(900);
        el.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    });
  });

  function onScroll() {
    if (!rafId) {
      rafId = requestAnimationFrame(() => {
        updateNav();
        if (!spyIsSuppressed()) updateActiveOnScroll();
        rafId = null;
      });
    }
  }

  function init() {
    updateNav();
    updateActiveOnScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("resize", onScroll);
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>

<style>
  @media (max-width: 767px) {
    body {
      padding-bottom: 70px;
    }
  }

  nav a.active {
    color: white !important;
  }
</style>